{"version":3,"sources":["components/styled-components/Button.js","components/styled-components/ContentBox.js","components/styled-components/Input.js","components/styled-components/Label.js","components/styled-components/FormField.js","redux/contacts/contacts-actions.js","components/ContactForm/ContactForm.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","components/App/App.jsx","redux/contacts/contacts-reducer.js","redux/store.js","styles/theme.js","styles/globalStyles.js","index.js"],"names":["Button","styled","button","props","size","bg","theme","primaryTextColor","primaryBgColor","invertedTextColor","invertedBgColor","position","accentColor","ContentBox","div","Input","input","Label","label","FormField","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","updateFilter","Form","withComponent","ContactForm","state","handleChange","event","target","value","setState","handleSubmit","createNewContact","preventDefault","reset","this","onSubmit","type","pattern","title","required","onChange","React","Component","connect","dispatch","actions","contacts","filter","e","map","onClick","filterContacts","lowerCasedFilter","toLowerCase","contact","includes","items","filteredContacts","createReducer","find","alert","combineReducers","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactsReducer","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","devTools","process","persistor","persistStore","createGlobalStyle","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.f30bd5fe.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nconst Button = styled.button`\n  display: inline-flex;\n  justify-content: center;\n  align-items: center;\n  border: none;\n  border-radius: 5px;\n  cursor: pointer;\n\n  ${props => {\n    switch (props.size) {\n      case 'small':\n        return 'height: 14px; min-width: 40px; font-size: 12px;';\n      case 'large':\n        return 'height: 30px; min-width: 140px; font-size: 20px;';\n      default:\n        return 'height: 24px; min-width: 100px; font-size: 16px;';\n    }\n  }}\n\n  ${props => {\n    if (props.bg === 'light') {\n      return `color: ${props.theme.primaryTextColor}; background-color: ${props.theme.primaryBgColor};`;\n    }\n    if (props.bg === 'dark') {\n      return `color: ${props.theme.invertedTextColor}; background-color: ${props.theme.invertedBgColor};`;\n    }\n  }}\n\n  ${props => {\n    switch (props.position) {\n      case 'bottom':\n        return 'margin-top: 5px;';\n      case 'right':\n        return 'margin-left: 10px;';\n      case 'left':\n        return 'margin-rigth: 10px;';\n      default:\n        return 'margin: 0;';\n    }\n  }}\n  \n  &:hover,\n  &:focus {\n    background: #333;\n    color: #fff;\n    outline: none;\n    box-shadow: 0 0 0 2px ${props => props.theme.accentColor};\n  }\n\n  &:active {\n    outline: none;\n    box-shadow: 0px 0px 8px 2px\n      ${props => {\n        if (props.bg === 'light') {\n          return ` ${props.theme.primaryBgColor};`;\n        }\n        if (props.bg === 'dark') {\n          return ` ${props.theme.invertedBgColor};`;\n        }\n      }};\n  }\n`;\n\nexport default Button;\n","import styled from 'styled-components';\n\nconst ContentBox = styled.div`\n  width: 300px;\n  margin: 0 auto;\n  padding: 15px;\n  background-color: ${props => props.theme.invertedBgColor};\n  border-radius: 5px;\n  box-shadow: 0px 0px 12px -2px ${props => props.theme.invertedBgColor};\n`;\n\nexport default ContentBox;\n","import styled from 'styled-components';\n\nconst Input = styled.input`\n  display: block;\n  width: 100%;\n  margin-top: 5px;\n  border-radius: 5px;\n  border: 2px solid transparent;\n  color: ${props => props.theme.primaryTextColor};\n\n  &:hover,\n  &:focus {\n    border-color: ${props => props.theme.accentColor};\n    outline: none;\n  }\n`;\n\nexport default Input;\n","import styled from 'styled-components';\n\nconst Label = styled.label`\n  color: ${props => props.theme.invertedTextColor};\n`;\n\nexport default Label;\n","import styled from 'styled-components';\n\nconst FormField = styled.div`\n  margin-bottom: 10px;\n  color: ${props => props.theme.primaryTextColor};\n`;\n\nexport default FormField;\n","import { v4 as uuidv4 } from 'uuid';\nimport { createAction } from '@reduxjs/toolkit';\n\nconst addContact = createAction('contacts/add', (name, number) => ({\n  payload: {\n    name,\n    number,\n    id: uuidv4(),\n  },\n}));\n\nconst deleteContact = createAction('contacts/delete');\n\nconst updateFilter = createAction('contacts/update_filter');\n\nexport { addContact, deleteContact, updateFilter };\n\n//Redux w/o toolkit\n// const actions = {\n//   addContact: createAction('contacts/add', (name, number) => ({\n//     payload: {\n//       name,\n//       number,\n//       id: uuidv4(),\n//     },\n//   })),\n\n//   deleteContact: createAction('contacts/delete'),\n\n//   updateFilter: createAction('contacts/update_filter'),\n// };\n\n// export default actions;\n\n// const addContact = (name, number) => ({\n//   type: types.ADD,\n//   payload: {\n//     name,\n//     number,\n//     id: uuidv4(),\n//   },\n// });\n// const deleteContact = id => ({\n//   type: types.DELETE,\n//   payload: id,\n// });\n// const updateFilter = value => ({\n//   type: types.UPDATE_FILTER,\n//   payload: value,\n// });\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport Button from '../styled-components/Button';\nimport ContentBox from '../styled-components/ContentBox';\nimport Input from '../styled-components/Input';\nimport Label from '../styled-components/Label';\nimport FormField from '../styled-components/FormField';\nimport * as actions from '../../redux/contacts/contacts-actions';\n\nconst Form = ContentBox.withComponent('form');\n\nclass ContactForm extends React.Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = event => {\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = event => {\n    const { name, number } = this.state;\n    const { createNewContact } = this.props;\n\n    event.preventDefault();\n\n    createNewContact(name, number);\n    this.reset();\n  };\n\n  reset = () => {\n    this.setState({ name: '', number: '' });\n  };\n\n  render() {\n    const { name, number } = this.state;\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormField>\n          <Label>\n            Name\n            <Input\n              type=\"text\"\n              name=\"name\"\n              value={name}\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n              required\n              onChange={this.handleChange}\n            />\n          </Label>\n        </FormField>\n        <FormField>\n          <Label>\n            Number\n            <Input\n              type=\"tel\"\n              name=\"number\"\n              value={number}\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n              required\n              onChange={this.handleChange}\n            />\n          </Label>\n        </FormField>\n        <Button type=\"submit\" bg=\"light\" position=\"bottom\">\n          Add contact\n        </Button>\n      </Form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  createNewContact: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  createNewContact: (name, number) =>\n    dispatch(actions.addContact(name, number)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactForm);\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport ContentBox from '../styled-components/ContentBox';\nimport Label from '../styled-components/Label';\nimport Input from '../styled-components/Input';\nimport * as actions from '../../redux/contacts/contacts-actions';\n\nconst Filter = ({ value, onChange }) => (\n  <ContentBox>\n    <Label>\n      Find contacts by name\n      <Input type=\"text\" name=\"filter\" value={value} onChange={onChange} />\n    </Label>\n  </ContentBox>\n);\n\nFilter.propTypes = {\n  value: PropTypes.string.isRequired,\n  onChange: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n  value: state.contacts.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChange: e => dispatch(actions.updateFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport Button from '../styled-components/Button';\nimport * as actions from '../../redux/contacts/contacts-actions';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  return (\n    <ul>\n      {contacts.map(({ id, name, number }) => (\n        <li key={id}>\n          {name} {number}\n          <Button\n            type=\"button\"\n            name={id}\n            onClick={deleteContact}\n            bg=\"dark\"\n            position=\"right\"\n          >\n            Delete\n          </Button>\n        </li>\n      ))}\n    </ul>\n  );\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = dispatch => ({\n  deleteContact: e => dispatch(actions.deleteContact(e.target.name)),\n});\n\nexport default connect(null, mapDispatchToProps)(ContactList);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport ContactForm from '../ContactForm';\nimport Filter from '../Filter';\nimport ContactList from '../ContactList';\n\nconst App = ({ filteredContacts }) => {\n  return (\n    <>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList contacts={filteredContacts} />\n    </>\n  );\n};\n\nconst filterContacts = (contacts, filter) => {\n  const lowerCasedFilter = filter.toLowerCase();\n\n  return contacts.filter(contact =>\n    contact.name.toLowerCase().includes(lowerCasedFilter),\n  );\n};\n\nconst mapStateToProps = state => {\n  const { items, filter } = state.contacts;\n  return { filteredContacts: filterContacts(items, filter), filter };\n};\n\nexport default connect(mapStateToProps)(App);\n","import { combineReducers } from 'redux';\nimport * as actions from './contacts-actions';\nimport { createReducer } from '@reduxjs/toolkit';\n\nconst items = createReducer([], {\n  [actions.addContact]: (state, { payload }) => {\n    const contactExists = state.find(contact => contact.name === payload.name);\n\n    if (contactExists) {\n      alert(`${payload.name} is already in contacts`);\n      return state;\n    }\n    return [payload, ...state];\n  },\n  [actions.deleteContact]: (state, { payload }) =>\n    state.filter(contact => contact.id !== payload),\n});\n\nconst filter = createReducer('', {\n  [actions.updateFilter]: (state, { payload }) => payload,\n});\n\nexport default combineReducers({\n  items,\n  filter,\n});\n\n// Redux w/o toolkit\n// const items = (state = [], { type, payload }) => {\n//   switch (type) {\n//     case types.ADD:\n//       const contactExists = state.find(\n//         contact => contact.name === payload.name,\n//       );\n\n//       if (contactExists) {\n//         alert(`${payload.name} is already in contacts`);\n//         return state;\n//       }\n//       return [payload, ...state];\n\n//     case types.DELETE:\n//       return state.filter(contact => contact.id !== payload);\n\n//     default:\n//       return state;\n//   }\n// };\n\n// const filter = (state = '', { type, payload }) => {\n//   switch (type) {\n//     case types.UPDATE_FILTER:\n//       return payload;\n\n//     default:\n//       return state;\n//   }\n// };\n","import {\n  persistStore,\n  persistReducer,\n  FLUSH,\n  REHYDRATE,\n  PAUSE,\n  PERSIST,\n  PURGE,\n  REGISTER,\n} from 'redux-persist';\nimport storage from 'redux-persist/lib/storage';\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\nimport contactsReducer from './contacts/contacts-reducer';\n\nconst contactsPersistConfig = {\n  key: 'contacts',\n  storage,\n  blacklist: ['filter'],\n};\n\nconst store = configureStore({\n  reducer: {\n    contacts: persistReducer(contactsPersistConfig, contactsReducer),\n  },\n  middleware: getDefaultMiddleware({\n    serializableCheck: {\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\n    },\n  }),\n  devTools: process.env.NODE_ENV !== 'production',\n});\n\nconst persistor = persistStore(store);\n\nexport { store, persistor };\n\n//Redux w/o toolkit\n// import { createStore, combineReducers } from 'redux';\n// import { composeWithDevTools } from 'redux-devtools-extension';\n// const rootReducer = combineReducers({\n//   contacts: persistReducer(contactsPersistConfig, contactsReducer),\n// });\n\n// const store = createStore(rootReducer, composeWithDevTools());\n","export const primaryBgColor = '#fff';\nexport const invertedBgColor = 'cyan';\nexport const invertedTextColor = '#555';\nexport const primaryTextColor = '#333';\nexport const accentColor = 'blue';\n","import { createGlobalStyle } from 'styled-components/macro';\n\nexport default createGlobalStyle`\nbody {\n  padding: 10px;\n  color: ${props => props.theme.primaryTextColor};\n  background-color:  ${props => props.theme.primaryBgColor};\n  text-align: center;\n}\nform{\n\n  margin: 0 auto;\n}\nul{\n  list-style: none;\n  padding: 0; \n}\nli {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  max-width: 300px;\n  margin 0 auto;\n  line-height: 1.8;\n}`;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport { Provider } from 'react-redux';\nimport { PersistGate } from 'redux-persist/integration/react';\nimport { store, persistor } from './redux/store';\nimport 'modern-normalize/modern-normalize.css';\nimport { ThemeProvider } from 'styled-components';\nimport * as theme from './styles/theme.js';\nimport GlobalStyle from './styles/globalStyles';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={<p>Loading...</p>} persistor={persistor}>\n        <ThemeProvider theme={theme}>\n          <GlobalStyle />\n          <App />\n        </ThemeProvider>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}